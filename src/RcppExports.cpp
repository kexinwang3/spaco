// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// location_search
Rcpp::List location_search(int num_times, int num_subjects, arma::cube W_total);
RcppExport SEXP _spaco_location_search(SEXP num_timesSEXP, SEXP num_subjectsSEXP, SEXP W_totalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< int >::type num_subjects(num_subjectsSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type W_total(W_totalSEXP);
    rcpp_result_gen = Rcpp::wrap(location_search(num_times, num_subjects, W_total));
    return rcpp_result_gen;
END_RCPP
}
// V_projection
arma::cube V_projection(int K, int num_times, int num_subjects, arma::cube X, arma::mat V0);
RcppExport SEXP _spaco_V_projection(SEXP KSEXP, SEXP num_timesSEXP, SEXP num_subjectsSEXP, SEXP XSEXP, SEXP V0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< int >::type num_subjects(num_subjectsSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V0(V0SEXP);
    rcpp_result_gen = Rcpp::wrap(V_projection(K, num_times, num_subjects, X, V0));
    return rcpp_result_gen;
END_RCPP
}
// empirical_W_total
arma::cube empirical_W_total(int num_times, int num_subjects, int K, arma::cube OBS, arma::cube Y);
RcppExport SEXP _spaco_empirical_W_total(SEXP num_timesSEXP, SEXP num_subjectsSEXP, SEXP KSEXP, SEXP OBSSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< int >::type num_subjects(num_subjectsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type OBS(OBSSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(empirical_W_total(num_times, num_subjects, K, OBS, Y));
    return rcpp_result_gen;
END_RCPP
}
// pairs_count
int pairs_count(int num_times, int num_subjects, arma::cube W_total);
RcppExport SEXP _spaco_pairs_count(SEXP num_timesSEXP, SEXP num_subjectsSEXP, SEXP W_totalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< int >::type num_subjects(num_subjectsSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type W_total(W_totalSEXP);
    rcpp_result_gen = Rcpp::wrap(pairs_count(num_times, num_subjects, W_total));
    return rcpp_result_gen;
END_RCPP
}
// ridge_penalized
arma::mat ridge_penalized(int num_subjects, int num_times, int num_features, int K, arma::mat XI, arma::mat OI, arma::mat V0Phi0, double eps);
RcppExport SEXP _spaco_ridge_penalized(SEXP num_subjectsSEXP, SEXP num_timesSEXP, SEXP num_featuresSEXP, SEXP KSEXP, SEXP XISEXP, SEXP OISEXP, SEXP V0Phi0SEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_subjects(num_subjectsSEXP);
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< int >::type num_features(num_featuresSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XI(XISEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OI(OISEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V0Phi0(V0Phi0SEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(ridge_penalized(num_subjects, num_times, num_features, K, XI, OI, V0Phi0, eps));
    return rcpp_result_gen;
END_RCPP
}
// rearrange_G
arma::cube rearrange_G(int K, arma::mat Utmp, arma::mat U0, arma::cube G);
RcppExport SEXP _spaco_rearrange_G(SEXP KSEXP, SEXP UtmpSEXP, SEXP U0SEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Utmp(UtmpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type U0(U0SEXP);
    Rcpp::traits::input_parameter< arma::cube >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(rearrange_G(K, Utmp, U0, G));
    return rcpp_result_gen;
END_RCPP
}
// kronecker_VPhi
Rcpp::List kronecker_VPhi(int K, arma::mat V0, arma::mat Phi0, arma::mat V, arma::mat Phi, arma::mat VPhi, arma::mat U2, arma::mat U3);
RcppExport SEXP _spaco_kronecker_VPhi(SEXP KSEXP, SEXP V0SEXP, SEXP Phi0SEXP, SEXP VSEXP, SEXP PhiSEXP, SEXP VPhiSEXP, SEXP U2SEXP, SEXP U3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V0(V0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Phi0(Phi0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type VPhi(VPhiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type U2(U2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type U3(U3SEXP);
    rcpp_result_gen = Rcpp::wrap(kronecker_VPhi(K, V0, Phi0, V, Phi, VPhi, U2, U3));
    return rcpp_result_gen;
END_RCPP
}
// rescale_VPhi
Rcpp::List rescale_VPhi(int K, double Phi_norm, double V_norm, arma::mat V, arma::mat Phi, arma::mat VPhi);
RcppExport SEXP _spaco_rescale_VPhi(SEXP KSEXP, SEXP Phi_normSEXP, SEXP V_normSEXP, SEXP VSEXP, SEXP PhiSEXP, SEXP VPhiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type Phi_norm(Phi_normSEXP);
    Rcpp::traits::input_parameter< double >::type V_norm(V_normSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type VPhi(VPhiSEXP);
    rcpp_result_gen = Rcpp::wrap(rescale_VPhi(K, Phi_norm, V_norm, V, Phi, VPhi));
    return rcpp_result_gen;
END_RCPP
}
// rescale_U
Rcpp::List rescale_U(int num_subjects, int num_times, int num_features, int K, arma::mat XI, arma::mat OI, arma::mat VPhi, double eps);
RcppExport SEXP _spaco_rescale_U(SEXP num_subjectsSEXP, SEXP num_timesSEXP, SEXP num_featuresSEXP, SEXP KSEXP, SEXP XISEXP, SEXP OISEXP, SEXP VPhiSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_subjects(num_subjectsSEXP);
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< int >::type num_features(num_featuresSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XI(XISEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OI(OISEXP);
    Rcpp::traits::input_parameter< arma::mat >::type VPhi(VPhiSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(rescale_U(num_subjects, num_times, num_features, K, XI, OI, VPhi, eps));
    return rcpp_result_gen;
END_RCPP
}
// sigma_init
arma::vec sigma_init(bool homoNoise, int num_features, int Osum, arma::mat xhat, arma::mat XI, arma::mat index);
RcppExport SEXP _spaco_sigma_init(SEXP homoNoiseSEXP, SEXP num_featuresSEXP, SEXP OsumSEXP, SEXP xhatSEXP, SEXP XISEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type homoNoise(homoNoiseSEXP);
    Rcpp::traits::input_parameter< int >::type num_features(num_featuresSEXP);
    Rcpp::traits::input_parameter< int >::type Osum(OsumSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xhat(xhatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XI(XISEXP);
    Rcpp::traits::input_parameter< arma::mat >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(sigma_init(homoNoise, num_features, Osum, xhat, XI, index));
    return rcpp_result_gen;
END_RCPP
}
// posterior_kronecker_VPhi
arma::mat posterior_kronecker_VPhi(int K, arma::mat V, arma::mat Phi, arma::mat VPhi);
RcppExport SEXP _spaco_posterior_kronecker_VPhi(SEXP KSEXP, SEXP VSEXP, SEXP PhiSEXP, SEXP VPhiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type VPhi(VPhiSEXP);
    rcpp_result_gen = Rcpp::wrap(posterior_kronecker_VPhi(K, V, Phi, VPhi));
    return rcpp_result_gen;
END_RCPP
}
// sigma_transform
arma::mat sigma_transform(int num_times, int num_features, arma::vec sigma, arma::vec s);
RcppExport SEXP _spaco_sigma_transform(SEXP num_timesSEXP, SEXP num_featuresSEXP, SEXP sigmaSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< int >::type num_features(num_featuresSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(sigma_transform(num_times, num_features, sigma, s));
    return rcpp_result_gen;
END_RCPP
}
// posterior_distribution
Rcpp::List posterior_distribution(int num_subjects, int num_times, int num_features, int K, bool fit_intercept, arma::vec intercepts, arma::mat XI, arma::mat OI, arma::mat VPhi, arma::vec s, arma::vec sigmaF, arma::mat Z, arma::mat beta);
RcppExport SEXP _spaco_posterior_distribution(SEXP num_subjectsSEXP, SEXP num_timesSEXP, SEXP num_featuresSEXP, SEXP KSEXP, SEXP fit_interceptSEXP, SEXP interceptsSEXP, SEXP XISEXP, SEXP OISEXP, SEXP VPhiSEXP, SEXP sSEXP, SEXP sigmaFSEXP, SEXP ZSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_subjects(num_subjectsSEXP);
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< int >::type num_features(num_featuresSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< bool >::type fit_intercept(fit_interceptSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type intercepts(interceptsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XI(XISEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OI(OISEXP);
    Rcpp::traits::input_parameter< arma::mat >::type VPhi(VPhiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigmaF(sigmaFSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(posterior_distribution(num_subjects, num_times, num_features, K, fit_intercept, intercepts, XI, OI, VPhi, s, sigmaF, Z, beta));
    return rcpp_result_gen;
END_RCPP
}
// kronecker_Vmu
arma::mat kronecker_Vmu(int K, int num_subjects, int num_features, arma::mat V, arma::mat mu, arma::mat A0);
RcppExport SEXP _spaco_kronecker_Vmu(SEXP KSEXP, SEXP num_subjectsSEXP, SEXP num_featuresSEXP, SEXP VSEXP, SEXP muSEXP, SEXP A0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type num_subjects(num_subjectsSEXP);
    Rcpp::traits::input_parameter< int >::type num_features(num_featuresSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A0(A0SEXP);
    rcpp_result_gen = Rcpp::wrap(kronecker_Vmu(K, num_subjects, num_features, V, mu, A0));
    return rcpp_result_gen;
END_RCPP
}
// s2_transform
arma::vec s2_transform(int num_subjects, int num_features, arma::vec sigma, arma::vec s2);
RcppExport SEXP _spaco_s2_transform(SEXP num_subjectsSEXP, SEXP num_featuresSEXP, SEXP sigmaSEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_subjects(num_subjectsSEXP);
    Rcpp::traits::input_parameter< int >::type num_features(num_featuresSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(s2_transform(num_subjects, num_features, sigma, s2));
    return rcpp_result_gen;
END_RCPP
}
// Mt_creator
Rcpp::List Mt_creator(int num_subjects, int num_times, int num_features, int K, arma::vec s2, arma::vec sigma, arma::mat XT, arma::mat OT, arma::mat A0, arma::mat V, arma::cube cov, arma::cube OBS);
RcppExport SEXP _spaco_Mt_creator(SEXP num_subjectsSEXP, SEXP num_timesSEXP, SEXP num_featuresSEXP, SEXP KSEXP, SEXP s2SEXP, SEXP sigmaSEXP, SEXP XTSEXP, SEXP OTSEXP, SEXP A0SEXP, SEXP VSEXP, SEXP covSEXP, SEXP OBSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_subjects(num_subjectsSEXP);
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< int >::type num_features(num_featuresSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XT(XTSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OT(OTSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type cov(covSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type OBS(OBSSEXP);
    rcpp_result_gen = Rcpp::wrap(Mt_creator(num_subjects, num_times, num_features, K, s2, sigma, XT, OT, A0, V, cov, OBS));
    return rcpp_result_gen;
END_RCPP
}
// penalty_search
arma::vec penalty_search(int num_times, int nlambda1, int max_iter0, arma::vec lambda1s, arma::mat A, arma::mat Omega, arma::vec dfs);
RcppExport SEXP _spaco_penalty_search(SEXP num_timesSEXP, SEXP nlambda1SEXP, SEXP max_iter0SEXP, SEXP lambda1sSEXP, SEXP ASEXP, SEXP OmegaSEXP, SEXP dfsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< int >::type nlambda1(nlambda1SEXP);
    Rcpp::traits::input_parameter< int >::type max_iter0(max_iter0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda1s(lambda1sSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type dfs(dfsSEXP);
    rcpp_result_gen = Rcpp::wrap(penalty_search(num_times, nlambda1, max_iter0, lambda1s, A, Omega, dfs));
    return rcpp_result_gen;
END_RCPP
}
// Omega_errors
arma::mat Omega_errors(int num_times, int nlambda1, double ridge_traj, arma::vec a, arma::vec b, arma::vec lambda1s, arma::vec phi, arma::mat Omega, arma::mat errors);
RcppExport SEXP _spaco_Omega_errors(SEXP num_timesSEXP, SEXP nlambda1SEXP, SEXP ridge_trajSEXP, SEXP aSEXP, SEXP bSEXP, SEXP lambda1sSEXP, SEXP phiSEXP, SEXP OmegaSEXP, SEXP errorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< int >::type nlambda1(nlambda1SEXP);
    Rcpp::traits::input_parameter< double >::type ridge_traj(ridge_trajSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda1s(lambda1sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type errors(errorsSEXP);
    rcpp_result_gen = Rcpp::wrap(Omega_errors(num_times, nlambda1, ridge_traj, a, b, lambda1s, phi, Omega, errors));
    return rcpp_result_gen;
END_RCPP
}
// Omega_update
double Omega_update(int num_times, int nlambda1, int lambda1_dfmin, int lambda1_dfmax, double ridge_traj, double lam1criterion, arma::vec a, arma::vec b, arma::mat Omega);
RcppExport SEXP _spaco_Omega_update(SEXP num_timesSEXP, SEXP nlambda1SEXP, SEXP lambda1_dfminSEXP, SEXP lambda1_dfmaxSEXP, SEXP ridge_trajSEXP, SEXP lam1criterionSEXP, SEXP aSEXP, SEXP bSEXP, SEXP OmegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< int >::type nlambda1(nlambda1SEXP);
    Rcpp::traits::input_parameter< int >::type lambda1_dfmin(lambda1_dfminSEXP);
    Rcpp::traits::input_parameter< int >::type lambda1_dfmax(lambda1_dfmaxSEXP);
    Rcpp::traits::input_parameter< double >::type ridge_traj(ridge_trajSEXP);
    Rcpp::traits::input_parameter< double >::type lam1criterion(lam1criterionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega(OmegaSEXP);
    rcpp_result_gen = Rcpp::wrap(Omega_update(num_times, nlambda1, lambda1_dfmin, lambda1_dfmax, ridge_traj, lam1criterion, a, b, Omega));
    return rcpp_result_gen;
END_RCPP
}
// binary_search
double binary_search(int num, double norm_constraint, arma::vec a, arma::vec b);
RcppExport SEXP _spaco_binary_search(SEXP numSEXP, SEXP norm_constraintSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num(numSEXP);
    Rcpp::traits::input_parameter< double >::type norm_constraint(norm_constraintSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(binary_search(num, norm_constraint, a, b));
    return rcpp_result_gen;
END_RCPP
}
// phi_transform
arma::vec phi_transform(int num_times, double lambda1, double ridge_traj, double h, arma::vec a, arma::vec b, arma::mat Omega);
RcppExport SEXP _spaco_phi_transform(SEXP num_timesSEXP, SEXP lambda1SEXP, SEXP ridge_trajSEXP, SEXP hSEXP, SEXP aSEXP, SEXP bSEXP, SEXP OmegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type ridge_traj(ridge_trajSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega(OmegaSEXP);
    rcpp_result_gen = Rcpp::wrap(phi_transform(num_times, lambda1, ridge_traj, h, a, b, Omega));
    return rcpp_result_gen;
END_RCPP
}
// Phi_solver
Rcpp::List Phi_solver(int K, int num_times, int nlambda1, int lambda1_dfmin, int lambda1_dfmax, double ridge_traj, double lam1criterion, double self_h, bool update_smooth_penalty, arma::vec lambda1, arma::mat self_Phi, arma::mat h, arma::mat Omega, arma::cube M);
RcppExport SEXP _spaco_Phi_solver(SEXP KSEXP, SEXP num_timesSEXP, SEXP nlambda1SEXP, SEXP lambda1_dfminSEXP, SEXP lambda1_dfmaxSEXP, SEXP ridge_trajSEXP, SEXP lam1criterionSEXP, SEXP self_hSEXP, SEXP update_smooth_penaltySEXP, SEXP lambda1SEXP, SEXP self_PhiSEXP, SEXP hSEXP, SEXP OmegaSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< int >::type nlambda1(nlambda1SEXP);
    Rcpp::traits::input_parameter< int >::type lambda1_dfmin(lambda1_dfminSEXP);
    Rcpp::traits::input_parameter< int >::type lambda1_dfmax(lambda1_dfmaxSEXP);
    Rcpp::traits::input_parameter< double >::type ridge_traj(ridge_trajSEXP);
    Rcpp::traits::input_parameter< double >::type lam1criterion(lam1criterionSEXP);
    Rcpp::traits::input_parameter< double >::type self_h(self_hSEXP);
    Rcpp::traits::input_parameter< bool >::type update_smooth_penalty(update_smooth_penaltySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type self_Phi(self_PhiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(Phi_solver(K, num_times, nlambda1, lambda1_dfmin, lambda1_dfmax, ridge_traj, lam1criterion, self_h, update_smooth_penalty, lambda1, self_Phi, h, Omega, M));
    return rcpp_result_gen;
END_RCPP
}
// kronecker_Phimu
arma::mat kronecker_Phimu(int K, int num_subjects, int num_times, arma::mat Phi, arma::mat mu, arma::mat A0);
RcppExport SEXP _spaco_kronecker_Phimu(SEXP KSEXP, SEXP num_subjectsSEXP, SEXP num_timesSEXP, SEXP PhiSEXP, SEXP muSEXP, SEXP A0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type num_subjects(num_subjectsSEXP);
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A0(A0SEXP);
    rcpp_result_gen = Rcpp::wrap(kronecker_Phimu(K, num_subjects, num_times, Phi, mu, A0));
    return rcpp_result_gen;
END_RCPP
}
// Mj_creator
Rcpp::List Mj_creator(int num_subjects, int num_times, int num_features, int K, arma::vec sigma, arma::mat XJ, arma::mat OJ, arma::mat A0, arma::mat Phi, arma::cube cov, arma::cube OBS);
RcppExport SEXP _spaco_Mj_creator(SEXP num_subjectsSEXP, SEXP num_timesSEXP, SEXP num_featuresSEXP, SEXP KSEXP, SEXP sigmaSEXP, SEXP XJSEXP, SEXP OJSEXP, SEXP A0SEXP, SEXP PhiSEXP, SEXP covSEXP, SEXP OBSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_subjects(num_subjectsSEXP);
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< int >::type num_features(num_featuresSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XJ(XJSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OJ(OJSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type cov(covSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type OBS(OBSSEXP);
    rcpp_result_gen = Rcpp::wrap(Mj_creator(num_subjects, num_times, num_features, K, sigma, XJ, OJ, A0, Phi, cov, OBS));
    return rcpp_result_gen;
END_RCPP
}
// V_solver
arma::mat V_solver(int K, int num_features, arma::mat self_V, arma::mat h, arma::cube M);
RcppExport SEXP _spaco_V_solver(SEXP KSEXP, SEXP num_featuresSEXP, SEXP self_VSEXP, SEXP hSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type num_features(num_featuresSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type self_V(self_VSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(V_solver(K, num_features, self_V, h, M));
    return rcpp_result_gen;
END_RCPP
}
// muZ_transform
Rcpp::List muZ_transform(int dimZ1, int k, int selfK, arma::vec mutrans, arma::mat Ztrans, arma::mat vec, arma::mat Z0, arma::mat tmp1, arma::cube mat);
RcppExport SEXP _spaco_muZ_transform(SEXP dimZ1SEXP, SEXP kSEXP, SEXP selfKSEXP, SEXP mutransSEXP, SEXP ZtransSEXP, SEXP vecSEXP, SEXP Z0SEXP, SEXP tmp1SEXP, SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dimZ1(dimZ1SEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type selfK(selfKSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mutrans(mutransSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Ztrans(ZtransSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z0(Z0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tmp1(tmp1SEXP);
    Rcpp::traits::input_parameter< arma::cube >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(muZ_transform(dimZ1, k, selfK, mutrans, Ztrans, vec, Z0, tmp1, mat));
    return rcpp_result_gen;
END_RCPP
}
// kronecker_muPhi
arma::mat kronecker_muPhi(int K, int num_subjects, int num_times, arma::mat Phi, arma::mat mu, arma::mat A0);
RcppExport SEXP _spaco_kronecker_muPhi(SEXP KSEXP, SEXP num_subjectsSEXP, SEXP num_timesSEXP, SEXP PhiSEXP, SEXP muSEXP, SEXP A0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type num_subjects(num_subjectsSEXP);
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A0(A0SEXP);
    rcpp_result_gen = Rcpp::wrap(kronecker_muPhi(K, num_subjects, num_times, Phi, mu, A0));
    return rcpp_result_gen;
END_RCPP
}
// sigma_helper
arma::mat sigma_helper(int num_subjects, int num_times, int K, int idx1length, arma::vec idx1, arma::mat A0, arma::mat A1, arma::cube cov, arma::mat O1, arma::mat Phi);
RcppExport SEXP _spaco_sigma_helper(SEXP num_subjectsSEXP, SEXP num_timesSEXP, SEXP KSEXP, SEXP idx1lengthSEXP, SEXP idx1SEXP, SEXP A0SEXP, SEXP A1SEXP, SEXP covSEXP, SEXP O1SEXP, SEXP PhiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_subjects(num_subjectsSEXP);
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type idx1length(idx1lengthSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type idx1(idx1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A1(A1SEXP);
    Rcpp::traits::input_parameter< arma::cube >::type cov(covSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type O1(O1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Phi(PhiSEXP);
    rcpp_result_gen = Rcpp::wrap(sigma_helper(num_subjects, num_times, K, idx1length, idx1, A0, A1, cov, O1, Phi));
    return rcpp_result_gen;
END_RCPP
}
// sigma_solver
arma::vec sigma_solver(int num_subjects, int num_times, int num_features, int idxlength, arma::mat XJ, arma::mat A0, arma::mat A1, arma::mat V, arma::vec idx);
RcppExport SEXP _spaco_sigma_solver(SEXP num_subjectsSEXP, SEXP num_timesSEXP, SEXP num_featuresSEXP, SEXP idxlengthSEXP, SEXP XJSEXP, SEXP A0SEXP, SEXP A1SEXP, SEXP VSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_subjects(num_subjectsSEXP);
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< int >::type num_features(num_featuresSEXP);
    Rcpp::traits::input_parameter< int >::type idxlength(idxlengthSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XJ(XJSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A1(A1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(sigma_solver(num_subjects, num_times, num_features, idxlength, XJ, A0, A1, V, idx));
    return rcpp_result_gen;
END_RCPP
}
// sigmaF_helper
arma::mat sigmaF_helper(int num_subjects, int K, bool fit_intercept, arma::vec intercepts, arma::mat Z, arma::mat beta);
RcppExport SEXP _spaco_sigmaF_helper(SEXP num_subjectsSEXP, SEXP KSEXP, SEXP fit_interceptSEXP, SEXP interceptsSEXP, SEXP ZSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_subjects(num_subjectsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< bool >::type fit_intercept(fit_interceptSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type intercepts(interceptsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(sigmaF_helper(num_subjects, K, fit_intercept, intercepts, Z, beta));
    return rcpp_result_gen;
END_RCPP
}
// sigmaF_solver
arma::vec sigmaF_solver(int num_subjects, int K, arma::mat fit, arma::mat mu, arma::cube cov);
RcppExport SEXP _spaco_sigmaF_solver(SEXP num_subjectsSEXP, SEXP KSEXP, SEXP fitSEXP, SEXP muSEXP, SEXP covSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_subjects(num_subjectsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type fit(fitSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type cov(covSEXP);
    rcpp_result_gen = Rcpp::wrap(sigmaF_solver(num_subjects, K, fit, mu, cov));
    return rcpp_result_gen;
END_RCPP
}
// left_creator
arma::mat left_creator(int h, arma::vec T1, arma::mat left);
RcppExport SEXP _spaco_left_creator(SEXP hSEXP, SEXP T1SEXP, SEXP leftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type T1(T1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type left(leftSEXP);
    rcpp_result_gen = Rcpp::wrap(left_creator(h, T1, left));
    return rcpp_result_gen;
END_RCPP
}
// ts_creator
Rcpp::List ts_creator(int num_subjects, int num_times, arma::vec T1, arma::mat O1);
RcppExport SEXP _spaco_ts_creator(SEXP num_subjectsSEXP, SEXP num_timesSEXP, SEXP T1SEXP, SEXP O1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_subjects(num_subjectsSEXP);
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type T1(T1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type O1(O1SEXP);
    rcpp_result_gen = Rcpp::wrap(ts_creator(num_subjects, num_times, T1, O1));
    return rcpp_result_gen;
END_RCPP
}
// mean_curve_update
Rcpp::List mean_curve_update(int num_subjects, int num_times, int num_features, double lam, arma::mat Psi, arma::mat O1, arma::mat Omega, arma::cube X);
RcppExport SEXP _spaco_mean_curve_update(SEXP num_subjectsSEXP, SEXP num_timesSEXP, SEXP num_featuresSEXP, SEXP lamSEXP, SEXP PsiSEXP, SEXP O1SEXP, SEXP OmegaSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_subjects(num_subjectsSEXP);
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< int >::type num_features(num_featuresSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Psi(PsiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type O1(O1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_curve_update(num_subjects, num_times, num_features, lam, Psi, O1, Omega, X));
    return rcpp_result_gen;
END_RCPP
}
// cv_creator
arma::cube cv_creator(int nlam, int num_subjects, int num_times, int num_features, arma::vec lams, arma::vec s0, arma::mat O1, arma::mat Psi, arma::mat Omega, arma::cube X, arma::cube cv);
RcppExport SEXP _spaco_cv_creator(SEXP nlamSEXP, SEXP num_subjectsSEXP, SEXP num_timesSEXP, SEXP num_featuresSEXP, SEXP lamsSEXP, SEXP s0SEXP, SEXP O1SEXP, SEXP PsiSEXP, SEXP OmegaSEXP, SEXP XSEXP, SEXP cvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nlam(nlamSEXP);
    Rcpp::traits::input_parameter< int >::type num_subjects(num_subjectsSEXP);
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< int >::type num_features(num_featuresSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lams(lamsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s0(s0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type O1(O1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Psi(PsiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type cv(cvSEXP);
    rcpp_result_gen = Rcpp::wrap(cv_creator(nlam, num_subjects, num_times, num_features, lams, s0, O1, Psi, Omega, X, cv));
    return rcpp_result_gen;
END_RCPP
}
// R_creator
arma::cube R_creator(int num_subjects, int num_times, int num_features, arma::mat basis, arma::mat B0, arma::cube R);
RcppExport SEXP _spaco_R_creator(SEXP num_subjectsSEXP, SEXP num_timesSEXP, SEXP num_featuresSEXP, SEXP basisSEXP, SEXP B0SEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_subjects(num_subjectsSEXP);
    Rcpp::traits::input_parameter< int >::type num_times(num_timesSEXP);
    Rcpp::traits::input_parameter< int >::type num_features(num_featuresSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B0(B0SEXP);
    Rcpp::traits::input_parameter< arma::cube >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(R_creator(num_subjects, num_times, num_features, basis, B0, R));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_spaco_location_search", (DL_FUNC) &_spaco_location_search, 3},
    {"_spaco_V_projection", (DL_FUNC) &_spaco_V_projection, 5},
    {"_spaco_empirical_W_total", (DL_FUNC) &_spaco_empirical_W_total, 5},
    {"_spaco_pairs_count", (DL_FUNC) &_spaco_pairs_count, 3},
    {"_spaco_ridge_penalized", (DL_FUNC) &_spaco_ridge_penalized, 8},
    {"_spaco_rearrange_G", (DL_FUNC) &_spaco_rearrange_G, 4},
    {"_spaco_kronecker_VPhi", (DL_FUNC) &_spaco_kronecker_VPhi, 8},
    {"_spaco_rescale_VPhi", (DL_FUNC) &_spaco_rescale_VPhi, 6},
    {"_spaco_rescale_U", (DL_FUNC) &_spaco_rescale_U, 8},
    {"_spaco_sigma_init", (DL_FUNC) &_spaco_sigma_init, 6},
    {"_spaco_posterior_kronecker_VPhi", (DL_FUNC) &_spaco_posterior_kronecker_VPhi, 4},
    {"_spaco_sigma_transform", (DL_FUNC) &_spaco_sigma_transform, 4},
    {"_spaco_posterior_distribution", (DL_FUNC) &_spaco_posterior_distribution, 13},
    {"_spaco_kronecker_Vmu", (DL_FUNC) &_spaco_kronecker_Vmu, 6},
    {"_spaco_s2_transform", (DL_FUNC) &_spaco_s2_transform, 4},
    {"_spaco_Mt_creator", (DL_FUNC) &_spaco_Mt_creator, 12},
    {"_spaco_penalty_search", (DL_FUNC) &_spaco_penalty_search, 7},
    {"_spaco_Omega_errors", (DL_FUNC) &_spaco_Omega_errors, 9},
    {"_spaco_Omega_update", (DL_FUNC) &_spaco_Omega_update, 9},
    {"_spaco_binary_search", (DL_FUNC) &_spaco_binary_search, 4},
    {"_spaco_phi_transform", (DL_FUNC) &_spaco_phi_transform, 7},
    {"_spaco_Phi_solver", (DL_FUNC) &_spaco_Phi_solver, 14},
    {"_spaco_kronecker_Phimu", (DL_FUNC) &_spaco_kronecker_Phimu, 6},
    {"_spaco_Mj_creator", (DL_FUNC) &_spaco_Mj_creator, 11},
    {"_spaco_V_solver", (DL_FUNC) &_spaco_V_solver, 5},
    {"_spaco_muZ_transform", (DL_FUNC) &_spaco_muZ_transform, 9},
    {"_spaco_kronecker_muPhi", (DL_FUNC) &_spaco_kronecker_muPhi, 6},
    {"_spaco_sigma_helper", (DL_FUNC) &_spaco_sigma_helper, 10},
    {"_spaco_sigma_solver", (DL_FUNC) &_spaco_sigma_solver, 9},
    {"_spaco_sigmaF_helper", (DL_FUNC) &_spaco_sigmaF_helper, 6},
    {"_spaco_sigmaF_solver", (DL_FUNC) &_spaco_sigmaF_solver, 5},
    {"_spaco_left_creator", (DL_FUNC) &_spaco_left_creator, 3},
    {"_spaco_ts_creator", (DL_FUNC) &_spaco_ts_creator, 4},
    {"_spaco_mean_curve_update", (DL_FUNC) &_spaco_mean_curve_update, 8},
    {"_spaco_cv_creator", (DL_FUNC) &_spaco_cv_creator, 11},
    {"_spaco_R_creator", (DL_FUNC) &_spaco_R_creator, 6},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_spaco(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
